// Code generated by counterfeiter. DO NOT EDIT.
package keysfakes

import (
	"sync"

	"github.com/simonhayward/gkeepassxreader/keys"
)

type FakeKey struct {
	RawKeyStub        func() []byte
	rawKeyMutex       sync.RWMutex
	rawKeyArgsForCall []struct{}
	rawKeyReturns     struct {
		result1 []byte
	}
	rawKeyReturnsOnCall map[int]struct {
		result1 []byte
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeKey) RawKey() []byte {
	fake.rawKeyMutex.Lock()
	ret, specificReturn := fake.rawKeyReturnsOnCall[len(fake.rawKeyArgsForCall)]
	fake.rawKeyArgsForCall = append(fake.rawKeyArgsForCall, struct{}{})
	fake.recordInvocation("RawKey", []interface{}{})
	fake.rawKeyMutex.Unlock()
	if fake.RawKeyStub != nil {
		return fake.RawKeyStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.rawKeyReturns.result1
}

func (fake *FakeKey) RawKeyCallCount() int {
	fake.rawKeyMutex.RLock()
	defer fake.rawKeyMutex.RUnlock()
	return len(fake.rawKeyArgsForCall)
}

func (fake *FakeKey) RawKeyReturns(result1 []byte) {
	fake.RawKeyStub = nil
	fake.rawKeyReturns = struct {
		result1 []byte
	}{result1}
}

func (fake *FakeKey) RawKeyReturnsOnCall(i int, result1 []byte) {
	fake.RawKeyStub = nil
	if fake.rawKeyReturnsOnCall == nil {
		fake.rawKeyReturnsOnCall = make(map[int]struct {
			result1 []byte
		})
	}
	fake.rawKeyReturnsOnCall[i] = struct {
		result1 []byte
	}{result1}
}

func (fake *FakeKey) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.rawKeyMutex.RLock()
	defer fake.rawKeyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeKey) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ keys.Key = new(FakeKey)

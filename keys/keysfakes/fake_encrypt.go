// Code generated by counterfeiter. DO NOT EDIT.
package keysfakes

import (
	"sync"

	"github.com/simonhayward/gkeepassxreader/keys"
)

type FakeEncrypt struct {
	EncodeStub        func(key []byte, seed []byte, rounds uint64, result *[]byte) error
	encodeMutex       sync.RWMutex
	encodeArgsForCall []struct {
		key    []byte
		seed   []byte
		rounds uint64
		result *[]byte
	}
	encodeReturns struct {
		result1 error
	}
	encodeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEncrypt) Encode(key []byte, seed []byte, rounds uint64, result *[]byte) error {
	var keyCopy []byte
	if key != nil {
		keyCopy = make([]byte, len(key))
		copy(keyCopy, key)
	}
	var seedCopy []byte
	if seed != nil {
		seedCopy = make([]byte, len(seed))
		copy(seedCopy, seed)
	}
	fake.encodeMutex.Lock()
	ret, specificReturn := fake.encodeReturnsOnCall[len(fake.encodeArgsForCall)]
	fake.encodeArgsForCall = append(fake.encodeArgsForCall, struct {
		key    []byte
		seed   []byte
		rounds uint64
		result *[]byte
	}{keyCopy, seedCopy, rounds, result})
	fake.recordInvocation("Encode", []interface{}{keyCopy, seedCopy, rounds, result})
	fake.encodeMutex.Unlock()
	if fake.EncodeStub != nil {
		return fake.EncodeStub(key, seed, rounds, result)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.encodeReturns.result1
}

func (fake *FakeEncrypt) EncodeCallCount() int {
	fake.encodeMutex.RLock()
	defer fake.encodeMutex.RUnlock()
	return len(fake.encodeArgsForCall)
}

func (fake *FakeEncrypt) EncodeArgsForCall(i int) ([]byte, []byte, uint64, *[]byte) {
	fake.encodeMutex.RLock()
	defer fake.encodeMutex.RUnlock()
	return fake.encodeArgsForCall[i].key, fake.encodeArgsForCall[i].seed, fake.encodeArgsForCall[i].rounds, fake.encodeArgsForCall[i].result
}

func (fake *FakeEncrypt) EncodeReturns(result1 error) {
	fake.EncodeStub = nil
	fake.encodeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeEncrypt) EncodeReturnsOnCall(i int, result1 error) {
	fake.EncodeStub = nil
	if fake.encodeReturnsOnCall == nil {
		fake.encodeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.encodeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeEncrypt) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.encodeMutex.RLock()
	defer fake.encodeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEncrypt) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ keys.Encrypt = new(FakeEncrypt)
